################################## NETWORK #####################################

# By default, if no "bind" configuration directive is specified, Redis listens
# for connections from all available network interfaces
bind 0.0.0.0

# Accept connections on the specified port, default is 6379
port 6379

# Enable protected mode for enhanced security
protected-mode yes

# Close the connection after a client is idle for N seconds
timeout 0

# TCP keepalive
tcp-keepalive 300

################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'no' for Docker
daemonize no

# Specify the server verbosity level
# Can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel notice

# Don't show Redis version on startup
always-show-logo no

# Supervised mode not needed in container
supervised no

################################ MEMORY #####################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected
maxmemory 256mb

# How Redis will select what to remove when maxmemory is reached.
# Using allkeys-lru as this is a pure cache setup
maxmemory-policy allkeys-lru

# LRU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. By default Redis will check 5 keys and pick the one that was
# used least recently
maxmemory-samples 5

# Effort in CPU percentage for expire keys
active-expire-effort 1

################################ PERSISTENCE ################################

# Disable RDB persistence for pure caching
save ""

# Disable AOF persistence for performance
appendonly no

################################ SECURITY ###################################

# Disable potentially dangerous commands in production
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command CONFIG ""
rename-command DEBUG ""

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time
maxclients 10000

################################ PERFORMANCE #################################

# Enable rehashing in main dictionary for better performance
activerehashing yes

# By default Redis asynchronously dumps the dataset on disk.
# If you can live with the idea that the latest records will be lost
# if something like a crash happens this is the preferred way to run Redis.
# Since we're using this as a cache, we don't need persistence
stop-writes-on-bgsave-error no

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will grow indefinitely.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
latency-monitor-threshold 100

############################## METRICS EXPORT ################################

# Redis metrics will be exported on port 9121 for Prometheus monitoring
# Note: This requires redis_exporter to be configured in the container