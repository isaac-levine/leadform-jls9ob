// mongodb v5.0.0
import { ObjectId } from 'mongodb';
import { LeadId } from './lead.types';
import { OrganizationStatus } from './organization.types';

/**
 * Type alias for message identifier using MongoDB ObjectId
 * Used for consistent typing of message references throughout the system
 */
export type MessageId = ObjectId;

/**
 * Enumeration defining message flow direction
 * Used for tracking whether messages are incoming or outgoing
 */
export enum MessageDirection {
  /** Message received from a lead */
  INBOUND = 'INBOUND',
  
  /** Message sent to a lead */
  OUTBOUND = 'OUTBOUND'
}

/**
 * Enumeration tracking message delivery lifecycle states
 * Used for monitoring message delivery status and handling retries
 */
export enum MessageStatus {
  /** Message is queued for sending */
  QUEUED = 'QUEUED',
  
  /** Message has been sent to the SMS provider */
  SENT = 'SENT',
  
  /** Message has been confirmed as delivered to recipient */
  DELIVERED = 'DELIVERED',
  
  /** Message delivery has failed */
  FAILED = 'FAILED'
}

/**
 * Enumeration distinguishing between different message sources
 * Used for tracking message origin and handling logic
 */
export enum MessageType {
  /** Message generated by AI system */
  AI = 'AI',
  
  /** Message sent by human agent */
  HUMAN = 'HUMAN',
  
  /** System-generated notification or alert */
  SYSTEM = 'SYSTEM'
}

/**
 * Core interface defining message structure
 * Contains all message-related data and tracking fields
 */
export interface Message {
  /** Unique identifier for the message */
  _id: MessageId;
  
  /** Reference to the lead this message belongs to */
  leadId: LeadId;
  
  /** Actual message content */
  content: string;
  
  /** Message flow direction (inbound/outbound) */
  direction: MessageDirection;
  
  /** Source type of the message */
  type: MessageType;
  
  /** Current delivery status */
  status: MessageStatus;
  
  /** Additional metadata for message tracking and processing */
  metadata: Record<string, any>;
  
  /** Timestamp when message was sent */
  sentAt: Date;
  
  /** Timestamp when message was delivered (null if not yet delivered) */
  deliveredAt: Date | null;
  
  /** Timestamp when message was created */
  createdAt: Date;
  
  /** Timestamp when message was last updated */
  updatedAt: Date;
}

/**
 * Data transfer object for creating new messages
 * Contains required fields for message creation
 */
export interface CreateMessageDTO {
  /** Reference to the lead receiving/sending the message */
  leadId: LeadId;
  
  /** Message content to be sent */
  content: string;
  
  /** Source type of the message */
  type: MessageType;
  
  /** Additional metadata for message processing */
  metadata: Record<string, any>;
}

/**
 * Data transfer object for updating message status
 * Used when receiving delivery status updates from SMS provider
 */
export interface UpdateMessageStatusDTO {
  /** Updated message delivery status */
  status: MessageStatus;
  
  /** Timestamp when message was delivered */
  deliveredAt: Date;
}